}
} else {
return(list(out[,c(1:2, 4, 6)], graph2))
}
}
}
else {
if (!missing(graph)){
if (graph == F){
return(out)
}
else {
return(list(out, graph1, graph2))
}
}else {
return(list(out, graph1, graph2))
}
}
}
all_sum_test("Group", "AromataseAct.avg", data, alternative="overall",graph=T)
?posthoc_test
posthoc_test(data$Group,data$AromataseAct.avg,data)
posthoc_test(data$Group,data$AromataseAct.avg,dat = data)
library(multcomp)
posthoc_test(data$Group,data$AromataseAct.avg,dat = data)
posthoc_test <- function(x, y, dat, method, K, digits=3, ...){
x <- factor(x)
test<-function(x){
if(x < 0.001) x.txt<- "<0.001"
else if(x<0.05) x.txt<-"<0.05"
else x.txt<- format(x,digits = 2)
x.txt
}
if(!missing(K)){
out <- lm(y ~ x, data = dat, ...)
##parametric
dunnett <- summary(glht(out, linfct = mcp(x = "Dunnett")))
tukey <- summary(glht(out, linfct = mcp(x = "Tukey")))
general <- summary(glht(out, linfct=mcp(x=K)))
holm <- summary(glht(out, linfct=mcp(x=K)), test=adjusted(type="holm"))
non_adjusted <- summary(glht(out, linfct=mcp(x=K)), test=adjusted(type="none"))
##dunnett
dunnett_p <- dunnett$test$pvalues
dunnett_p1 <- unname(dunnett_p, force = FALSE)
np1 <- length(dunnett_p1)
p.dunnett<-numeric(np1)
for (i in 1:np1) {
p.dunnett[i] <- test(dunnett_p1[i])
}
##tukey
tukey_p <- tukey$test$pvalues
tukey_p1 <- unname(tukey_p, force = FALSE)
np2 <- length(tukey_p1)
p.tukey<-numeric(np2)
for (i in 1:np2) {
p.tukey[i] <- test(tukey_p1[i])
}
##general
general_p <- general$test$pvalues
general_p1 <- unname(general_p, force = FALSE)
np3 <- length(general_p1)
p.general<-numeric(np3)
for (i in 1:np3) {
p.general[i] <- test(general_p1[i])
}
##holm
holm_p <- holm$test$pvalues
holm_p1 <- unname(holm_p, force = FALSE)
np4 <- length(holm_p1)
p.holm<-numeric(np4)
for (i in 1:np4) {
p.holm[i] <- test(holm_p1[i])
}
#non adjusted
non_adjusted_p <- non_adjusted$test$pvalues
non_adjusted_p1 <- unname(non_adjusted_p, force = FALSE)
np5 <- length(non_adjusted_p1)
p.nonad<-numeric(np5)
for (i in 1:np5) {
p.nonad[i] <- test(non_adjusted_p1[i])
}
if(!missing(method)){
if (method == "dunnett"){
out <- data.frame(pm.p.dunnett=p.dunnett,
pm.p=p.nonad
)
} else if (method == "tukey"){
out <- data.frame(pm.p.tukey=p.tukey,
pm.p=p.nonad
)
} else if (method == "general"){
out <- data.frame(pm.p.general=p.general,
pm.p=p.nonad
)
} else if (method == "holm"){
out <- data.frame(pm.p.holm=p.holm,
pm.p=p.nonad
)
}
} else {
out <- data.frame(pm.p.general=p.general,
pm.p=p.nonad
)
}
rownames(out) <- rownames(K)
}
else {
#don't have k matrix
out <- lm(y ~ x, data = dat, ...)
dunnett <- summary(glht(out, linfct = mcp(x = "Dunnett")))
tukey <- summary(glht(out, linfct = mcp(x = "Tukey")))
##dunnett
dunnett_p <- dunnett$test$pvalues
dunnett_p1 <- unname(dunnett_p, force = FALSE)
np1 <- length(dunnett_p1)
p.dunnett<-numeric(np1)
for (i in 1:np1) {
p.dunnett[i] <- test(dunnett_p1[i])
}
##tukey
tukey_p <- tukey$test$pvalues
tukey_p1 <- unname(tukey_p, force = FALSE)
np2 <- length(tukey_p1)
p.tukey<-numeric(np2)
for (i in 1:np1) {
p.tukey[i] <- test(tukey_p1[i])
}
if(!missing(method)){
if (method == "dunnett"){
out <- data.frame(pm.p.dunnett=p.dunnett
)
rownames(out) <- rownames(dunnett$linfct)
} else if (method == "tukey"){
out <- data.frame(pm.p.tukey=p.tukey
)
rownames(out) <- rownames(tukey$linfct)
}
}else {
out <- data.frame(pm.p.tukey=p.tukey
)
rownames(out) <- rownames(tukey$linfct)
}
}
return(out)
}
posthoc_test(data$Group,data$AromataseAct.avg,dat = data)
posthoc_test <- function(x, y, dat, method, K, digits=3, ...){
x <- factor(x)
test<-function(x){
if(x < 0.001) x.txt<- "<0.001"
else if(x<0.05) x.txt<-"<0.05"
else x.txt<- format(x,digits = 2)
x.txt
}
if(!missing(K)){
out <- lm(y ~ x, data = dat, ...)
##parametric
dunnett <- summary(glht(out, linfct = mcp(x = "Dunnett")))
tukey <- summary(glht(out, linfct = mcp(x = "Tukey")))
general <- summary(glht(out, linfct=mcp(x=K)))
holm <- summary(glht(out, linfct=mcp(x=K)), test=adjusted(type="holm"))
non_adjusted <- summary(glht(out, linfct=mcp(x=K)), test=adjusted(type="none"))
##dunnett
dunnett_p <- dunnett$test$pvalues
dunnett_p1 <- unname(dunnett_p, force = FALSE)
np1 <- length(dunnett_p1)
p.dunnett<-numeric(np1)
for (i in 1:np1) {
p.dunnett[i] <- test(dunnett_p1[i])
}
##tukey
tukey_p <- tukey$test$pvalues
tukey_p1 <- unname(tukey_p, force = FALSE)
np2 <- length(tukey_p1)
p.tukey<-numeric(np2)
for (i in 1:np2) {
p.tukey[i] <- test(tukey_p1[i])
}
##general
general_p <- general$test$pvalues
general_p1 <- unname(general_p, force = FALSE)
np3 <- length(general_p1)
p.general<-numeric(np3)
for (i in 1:np3) {
p.general[i] <- test(general_p1[i])
}
##holm
holm_p <- holm$test$pvalues
holm_p1 <- unname(holm_p, force = FALSE)
np4 <- length(holm_p1)
p.holm<-numeric(np4)
for (i in 1:np4) {
p.holm[i] <- test(holm_p1[i])
}
#non adjusted
non_adjusted_p <- non_adjusted$test$pvalues
non_adjusted_p1 <- unname(non_adjusted_p, force = FALSE)
np5 <- length(non_adjusted_p1)
p.nonad<-numeric(np5)
for (i in 1:np5) {
p.nonad[i] <- test(non_adjusted_p1[i])
}
if(!missing(method)){
if (method == "dunnett"){
out <- data.frame(pm.p.dunnett=p.dunnett,
pm.p=p.nonad
)
} else if (method == "tukey"){
out <- data.frame(pm.p.tukey=p.tukey,
pm.p=p.nonad
)
} else if (method == "general"){
out <- data.frame(pm.p.general=p.general,
pm.p=p.nonad
)
} else if (method == "holm"){
out <- data.frame(pm.p.holm=p.holm,
pm.p=p.nonad
)
}
} else {
out <- data.frame(pm.p.general=p.general,
pm.p=p.nonad
)
}
rownames(out) <- rownames(K)
}
else {
#don't have k matrix
out <- lm(y ~ x, data = dat, ...)
dunnett <- summary(glht(out, linfct = mcp(x = "Dunnett")))
tukey <- summary(glht(out, linfct = mcp(x = "Tukey")))
##dunnett
dunnett_p <- dunnett$test$pvalues
dunnett_p1 <- unname(dunnett_p, force = FALSE)
np1 <- length(dunnett_p1)
p.dunnett<-numeric(np1)
for (i in 1:np1) {
p.dunnett[i] <- test(dunnett_p1[i])
}
##tukey
tukey_p <- tukey$test$pvalues
tukey_p1 <- unname(tukey_p, force = FALSE)
np2 <- length(tukey_p1)
p.tukey<-numeric(np2)
for (i in 1:np2) {
p.tukey[i] <- test(tukey_p1[i])
}
if(!missing(method)){
if (method == "dunnett"){
out <- data.frame(pm.p.dunnett=p.dunnett
)
rownames(out) <- rownames(dunnett$linfct)
} else if (method == "tukey"){
out <- data.frame(pm.p.tukey=p.tukey
)
rownames(out) <- rownames(tukey$linfct)
}
}else {
out <- data.frame(pm.p.tukey=p.tukey
)
rownames(out) <- rownames(tukey$linfct)
}
}
return(out)
}
posthoc_test(data$Group,data$AromataseAct.avg,dat = data)
library(gln)
library(gln)
data<-read.csv("/Users/summer/Downloads/MammaryGlandData.csv")
data
all_sum_test("Group","AromataseAct.avg",dat=data,alternative = "overall",graph = T)
all_sum_test("Group","AromataseAct.avg",dat=data,alternative = "overall",graph = F)
?`gln-package`
data_sum(data$AromataseAct.avg)
posthoc_test(data$Group,data$AromataseAct.avg,dat=data)
data
posthoc_test(data$Group,data$qPCR.15PGDH,dat=data)
library(gln)
library(gln)
?intdata
devtools::use_data(internal=TRUE)
data<-read.csv(/Users/summer/Downloads/MouseDIO_PGEM_PGDM_Study.csv)
data<-read.csv("/Users/summer/Downloads/MouseDIO_PGEM_PGDM_Study.csv")
data
devtools::use_data(internal=TRUE)
devtools::use_data(data)
data
devtools::use_data(data,internal = TRUE)
devtools::use_data(sysdata,internal = TRUE)
library(gln)
library(gln)
?sysdata
library(sysdata)
?all_sum_test
library(gln)
?all_sum_test
library(gln)
?all_sum_test
library(gln)
?all_sum_test
save()
x<-rnorm(10,10)
x
devtools::use_data(x)
devtools::use_data(intaldata)
devtools::use_data(intdata)
?intdata
data("MammaryGlandData")
data
library(gln)
library(gln)
data("glanddata")
data
?glanddata
data()
load("~/Downloads/package/gln/data/intdata.rda")
library(gln)
?intdata
intdata
data()
library(gln)
?posthoc_test
library(gln)
library(gln)
?posthoc_test
?posthoc_test
ï¼Ÿdata_sum
?data_sum
library(gln)
library(gln)
?posthoc_test
library(gln)
?posthoc_test
?all_sum_test
#' create tables and graphs providing overall multiple comparison
#'
#' Generic function to create tables and plots providing basic overall numerical and graphical summary in different groups for comparison, based on parametric and/or non-parametric approach.
#'
#' @param x   a vector that contains different levels whose summary results are wanted for comparison.
#' @param y   a numeric vector of data values
#' @param data  a data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables to be summarized.
#' @param alternative	  a character string specifying the alternative approaches, must be one of "overall" (default), "parametric" or " non-parametric".
#' @param graph	  logical. If TRUE the corresponding plots (bar plot, box plot) are returned.
#' @param digits     the digits of the data values (default is 3)
#' @param ...	  further arguments to be passed to or from methods.
#'
#' @return  For parametric approach, it returns a table containing sample size, number of observations without missing value, mean, standard deviation for each level and F-test results, and a bar plot showing mean, standard error for each level and F-test results. For non-parametric approach, it returns a table containing sample size, number of observations without missing value, median, IQR for each level and Kruskal-Wallis test results, and a boxplot showing median, IQR for each level and Kruskal-Wallis test results. For overall, it returns a table containing both the summary results in parametric and non-parametric approach, a bar plot showing mean, standard error for each level and F-test results, and a boxplot showing median, IQR for each level and Kruskal-Wallis test results.
#'
#' @references Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth & Brooks/Cole.
#'
#' @seealso \code{\link[stats]{anova}}
#'
#' \code{\link[stats]{kruskal.test}}
#'
#' @examples
x <- c(1,1,2,2,3,3,4,4)
y <- c(1,3,2,3,3,3,2,4)
data <- as.data.frame(cbind(x,y))
all_sum_test("x", "y", data, alternative = "parametric")
all_sum_test(x,y,data)
@import ggplot2
@import multcomp
@export
all_sum_test <- function(x, y, data, alternative, graph, digits = 3, ...){
data_sum <- function(y){
out <- data.frame(n = length(y),
n.complete = length(y[!is.na(y)]),
mean = mean(y, na.rm=T),
sd = sd(y, na.rm=T),
median = median(y, na.rm=T),
lower_quartile = quantile(y, 0.25, na.rm=T),
upper_quartile = quantile(y, 0.75, na.rm=T))
return(out)
}
y_graph <- y
x <- unname(factor(unlist(data[x])))
y <- unname(as.numeric(unlist(data[y])))
smry <- tapply(y, x, data_sum)
smry <- do.call(rbind, smry)
lm <- lm (y ~ x, data = data, ...)
anova <- anova(lm (y ~ 1, data = data, ...),lm)
kruskal <- kruskal.test(y~x)
test<-function(x){
if(x < 0.001) x.txt<- "<0.001"
else if(x<0.05) x.txt<-"<0.05"
else x.txt<- format(x,digits = 2)
x.txt
}
numrow <- nrow(smry)-1
p_anova <- test(anova$`Pr(>F)`[2])
p_kw <- test(kruskal$p.value)
out <- data.frame(smry[,1:2],
mean.sd = paste0(format(smry$mean, digits=digits),
" +/- ",
format(smry$sd, digits=digits)),
median.IQR = paste0(format(smry$median, digits=digits),
" (",
format(smry$lower_quartile, digits=digits), ",", format(smry$upper_quartile, digits = digits), ")"),
p.anova=paste0(c(rep("", numrow), p_anova)),
p.kw=paste0(c(rep("", numrow), p_kw))
)
names(out)[3] <- "mean +/- sd"
names(out)[4] <- "median(IQR)"
graph_test <- function(x){
if(x < 0.001) x.txt<- "<0.001"
else if(x<0.05) x.txt<-"<0.05"
else x.txt<- paste("=", format(x,digits = 2))
x.txt
}
p_anova_graph <- graph_test(anova$`Pr(>F)`[2])
p_kw_graph <- graph_test(kruskal$p.value)
##making the plot
x_cat <- levels(x)
x_num <- length(x_cat)
x_mean <- numeric(x_num)
x_se <- numeric(x_num)
for (i in 1:x_num) {
x_mean[i] <- mean(y[which(x == x_cat[i])])
}
for (i in 1:x_num) {
x_se[i] <- sd(y[which(x == x_cat[i])])/sqrt(length(y[which(x == x_cat[i])]))
}
data1 <- data.frame(x_mean, x_cat, x_se)
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = data1$x_mean + data1$x_se,
ymin = data1$x_mean - data1$x_se)
graph1 <-
ggplot(data1, aes(x_cat, x_mean, fill = x_cat)) +
geom_bar(stat="identity") +
geom_errorbar(limits, position = dodge, width = 0.25) +
annotate("text", label = paste("P", p_anova_graph, sep = ""), x = 1, y = ceiling(min(x_mean + x_se) + max(x_mean + x_se)), size = 3) +
theme(panel.background = element_rect(fill = "white", colour = "black"), axis.title.x=element_blank()) +
labs(y = y_graph, fontface="bold") +
theme(legend.position="none")
graph2 <-
ggplot(data, aes(x, y, fill = x)) +
geom_boxplot() +
annotate("text", label = paste("P", p_kw_graph, sep = ""), x = 1, y = ceiling(min(x_mean + x_se) + max(x_mean + x_se)), size = 3) +
theme(panel.background = element_rect(fill = "white", colour = "black"), axis.title.x=element_blank()) +
labs(y = y_graph, fontface="bold") +
theme(legend.position="none")
if (!missing(alternative)) {
if (alternative == "overall"){
if (!missing(graph)){
if (graph == T){
return(list(out, graph1, graph2))
}
else {
return(out)
}
}else {
return(list(out, graph1, graph2))
}
}
else if (alternative == "parametric"){
if (!missing(graph)){
if (graph == F){
return(out[,c(1:3, 5)])
}
else {
return(list(out[,c(1:3, 5)], graph1))
}
} else {
return(list(out[,c(1:3, 5)], graph1))
}
}
else if (alternative == "nonparametric") {
if (!missing(graph)){
if (graph == F) {
return(out[,c(1:2, 4, 6)])
}
else{
return(list(out[,c(1:2, 4, 6)], graph2))
}
} else {
return(list(out[,c(1:2, 4, 6)], graph2))
}
}
}
else {
if (!missing(graph)){
if (graph == F){
return(out)
}
else {
return(list(out, graph1, graph2))
}
}else {
return(list(out, graph1, graph2))
}
}
}
?all_sum_test
library(gln)
ï¼Ÿall_sum_test()
?all_sum_test
?all_sum_test
data<-read.csv("/Users/summer/Downloads/Mousedata.csv")
data
library(gln)
?`gln-package`
?`gln-package`
?all_sum_test
ï¼Ÿgln
?gln
?all_sum_test
git config --global --list
cat ~/.ssh/id_rsa.pub
install_github('gln','YuweiNi45')
install.packages("devtools")
devtools::install_github("YuweiNi45/gln")
